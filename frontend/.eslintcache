[{"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\index.js":"1","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\App.js":"2","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\reportWebVitals.js":"3","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\router\\index.js":"4","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\pages\\payment.js":"5","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\pages\\purchase.js":"6","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\pages\\contact.js":"7","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\pages\\serverinfo.js":"8","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\pages\\Auth\\login.js":"9","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\pages\\profile.js":"10","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\pages\\Auth\\register.js":"11","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\pages\\index.js":"12","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Layout\\index.js":"13","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Element\\textarea.js":"14","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Element\\button.js":"15","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Element\\input.js":"16","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\action\\action.js":"17","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\utills\\gethash.js":"18","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\assets\\json\\period.js":"19","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\assets\\json\\gamedata.js":"20","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\assets\\json\\mopacks.js":"21","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\assets\\json\\location.js":"22","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Element\\index.js":"23","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Image\\index.js":"24","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Paypal\\index.js":"25","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Element\\Card\\backgroundCard.js":"26","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Element\\Card\\gameCard.js":"27","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Layout\\footer.js":"28","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Layout\\header.js":"29","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\utills\\index.js":"30","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Paypal\\PayButtons.js":"31","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\utills\\manager.js":"32","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\utills\\getlocation.js":"33"},{"size":552,"mtime":1687208285951,"results":"34","hashOfConfig":"35"},{"size":684,"mtime":1687901123900,"results":"36","hashOfConfig":"35"},{"size":375,"mtime":1687208285954,"results":"37","hashOfConfig":"35"},{"size":1065,"mtime":1687288051927,"results":"38","hashOfConfig":"35"},{"size":10043,"mtime":1688185084131,"results":"39","hashOfConfig":"35"},{"size":5074,"mtime":1687837177641,"results":"40","hashOfConfig":"35"},{"size":2546,"mtime":1687539085710,"results":"41","hashOfConfig":"35"},{"size":21794,"mtime":1688177486789,"results":"42","hashOfConfig":"35"},{"size":2892,"mtime":1687286844436,"results":"43","hashOfConfig":"35"},{"size":4830,"mtime":1688501332006,"results":"44","hashOfConfig":"35"},{"size":3913,"mtime":1687286831415,"results":"45","hashOfConfig":"35"},{"size":3790,"mtime":1687388232905,"results":"46","hashOfConfig":"35"},{"size":382,"mtime":1687208285950,"results":"47","hashOfConfig":"35"},{"size":471,"mtime":1687208285948,"results":"48","hashOfConfig":"35"},{"size":1056,"mtime":1688116301881,"results":"49","hashOfConfig":"35"},{"size":686,"mtime":1687540473772,"results":"50","hashOfConfig":"35"},{"size":1985,"mtime":1687291833826,"results":"51","hashOfConfig":"35"},{"size":10530,"mtime":1687208285956,"results":"52","hashOfConfig":"35"},{"size":195,"mtime":1687208285946,"results":"53","hashOfConfig":"35"},{"size":3196,"mtime":1687837520234,"results":"54","hashOfConfig":"35"},{"size":1618,"mtime":1687208285945,"results":"55","hashOfConfig":"35"},{"size":24622,"mtime":1687901428637,"results":"56","hashOfConfig":"35"},{"size":468,"mtime":1687208285947,"results":"57","hashOfConfig":"35"},{"size":728,"mtime":1687387659659,"results":"58","hashOfConfig":"35"},{"size":709,"mtime":1687893462022,"results":"59","hashOfConfig":"35"},{"size":876,"mtime":1687594759537,"results":"60","hashOfConfig":"35"},{"size":1603,"mtime":1687392667783,"results":"61","hashOfConfig":"35"},{"size":346,"mtime":1687208285949,"results":"62","hashOfConfig":"35"},{"size":3043,"mtime":1687293159037,"results":"63","hashOfConfig":"35"},{"size":774,"mtime":1687368276603,"results":"64","hashOfConfig":"35"},{"size":1830,"mtime":1687893189793,"results":"65","hashOfConfig":"35"},{"size":8849,"mtime":1688178574937,"results":"66","hashOfConfig":"35"},{"size":3435,"mtime":1688366296634,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"8o09gm",{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\index.js",[],["139","140"],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\App.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\reportWebVitals.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\router\\index.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\pages\\payment.js",["141","142"],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\pages\\purchase.js",["143"],"import styled from \"styled-components\";\r\nimport { Column, DefaultImage, Row } from \"../components/Element\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport { Vector } from \"../components/Image\";\r\nimport Button from \"../components/Element/button\";\r\n\r\nconst Purchase = () => {\r\n  const location = useLocation();\r\n  const [selectedData, setSelectedData] = useState(location.state.data);\r\n  const navigate = useNavigate();\r\n  const handleClick = (data, flag) => {\r\n    navigate(\"/payment\", {\r\n      state: {\r\n        data: data,\r\n        flag: flag,\r\n      },\r\n    });\r\n  };\r\n  return (\r\n    <Wrapper>\r\n      {selectedData && (\r\n        <Banner>\r\n          <BannerImage src={selectedData.background} />\r\n          <BannerContainer>\r\n            <Card>\r\n              <CardPrice>\r\n                <PriceTitle>{selectedData.price1} </PriceTitle>\r\n                <PriceGeneral> / per month</PriceGeneral>\r\n              </CardPrice>\r\n              <CardTitle>\r\n                <CardTitleHeader>Budget</CardTitleHeader>{\" \"}\r\n                <>For Beginner Who Want To Scale Business Globally</>\r\n              </CardTitle>\r\n              <CardDetail>\r\n                <CardDetailItem>\r\n                  <DefaultImage src={Vector} />\r\n                  <>vCore {selectedData.cpu1}</>\r\n                </CardDetailItem>\r\n                <CardDetailItem>\r\n                  <DefaultImage src={Vector} />\r\n                  <>Ram {selectedData.ram1}GB</>\r\n                </CardDetailItem>\r\n                <CardDetailItem>\r\n                  <DefaultImage src={Vector} />\r\n                  <>SSD {selectedData.ssd1}GB</>\r\n                </CardDetailItem>\r\n              </CardDetail>\r\n              <Button\r\n                text=\"GET STARTED\"\r\n                width=\"100%\"\r\n                radius=\"6px\"\r\n                fweight=\"500\"\r\n                color=\"black\"\r\n                fsize=\"16px\"\r\n                padding=\"15px\"\r\n                onClick={() => handleClick(selectedData, 1)}\r\n              />\r\n            </Card>\r\n            <Card>\r\n              <CardPrice>\r\n                <PriceTitle>{selectedData.price2} </PriceTitle>\r\n                <PriceGeneral> / per month</PriceGeneral>\r\n              </CardPrice>\r\n              <CardTitle>\r\n                <CardTitleHeader>Performance</CardTitleHeader>{\" \"}\r\n                <>For Beginner Who Want To Scale Business Globally</>\r\n              </CardTitle>\r\n              <CardDetail>\r\n                <CardDetailItem>\r\n                  <DefaultImage src={Vector} />\r\n                  <>vCore {selectedData.cpu2}</>\r\n                </CardDetailItem>\r\n                <CardDetailItem>\r\n                  <DefaultImage src={Vector} />\r\n                  <>Ram {selectedData.ram2}GB</>\r\n                </CardDetailItem>\r\n                <CardDetailItem>\r\n                  <DefaultImage src={Vector} />\r\n                  <>SSD {selectedData.ssd2}GB</>\r\n                </CardDetailItem>\r\n              </CardDetail>\r\n              <Button\r\n                text=\"GET STARTED\"\r\n                width=\"100%\"\r\n                radius=\"6px\"\r\n                fweight=\"500\"\r\n                color=\"black\"\r\n                fsize=\"16px\"\r\n                padding=\"15px\"\r\n                onClick={() => handleClick(selectedData, 2)}\r\n              />\r\n            </Card>\r\n          </BannerContainer>\r\n        </Banner>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled(Column)`\r\n  background-color: #313131;\r\n  width: 100%;\r\n  color: white;\r\n  height: 100vh;\r\n  @media screen and (max-width: 640px) {\r\n    height: 100%;\r\n  }\r\n`;\r\nconst Banner = styled(Column)`\r\n  width: 100%;\r\n  position: relative;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n`;\r\nconst BannerImage = styled(DefaultImage)`\r\n  position: absolute;\r\n  height: 100%;\r\n  mask-image: linear-gradient(#fff, transparent);\r\n  width: 100%;\r\n  object-position: top;\r\n  margin-top: 50px;\r\n  object-fit: cover;\r\n`;\r\nconst BannerContainer = styled(Row)`\r\n  height: 100%;\r\n  gap: 40px;\r\n  margin-top: 50px;\r\n  @media screen and (max-width: 640px) {\r\n    flex-direction: column;\r\n    margin-top: 100px;\r\n    margin-bottom: 50px;\r\n  }\r\n`;\r\n\r\nconst Card = styled(Column)`\r\n  padding: 30px 20px;\r\n  gap: 40px;\r\n  background: rgb(30, 30, 30);\r\n  border-radius: 20px;\r\n  width: 300px;\r\n  height: 450px;\r\n  gap: 30px;\r\n  z-index: 1;\r\n  opacity: 0.7;\r\n  font-size: 14px;\r\n  justify-content: center;\r\n`;\r\nconst CardPrice = styled(Row)`\r\n  gap: 10px;\r\n  width: 100%;\r\n`;\r\nconst PriceTitle = styled.div`\r\n  font-weight: 700;\r\n  font-size: 50px;\r\n`;\r\nconst PriceGeneral = styled.div`\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n`;\r\nconst CardTitle = styled(Column)`\r\n  gap: 20px;\r\n  align-items: flex-start;\r\n  width: 100%;\r\n`;\r\nconst CardTitleHeader = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n`;\r\nconst CardDetail = styled(Column)`\r\n  gap: 20px;\r\n  width: 100%;\r\n  align-items: flex-start;\r\n`;\r\nconst CardDetailItem = styled(Row)`\r\n  gap: 20px;\r\n`;\r\nexport default Purchase;\r\n","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\pages\\contact.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\pages\\serverinfo.js",["144","145","146","147"],"import styled from \"styled-components\";\r\nimport { Column, Row } from \"../components/Element\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport CoinbaseCommerceButton from \"react-coinbase-commerce\";\r\nimport {\r\n  currentBlock,\r\n  getAppSpecification,\r\n  getbenchmarks,\r\n  getExpire,\r\n  getFluxAuth,\r\n  getIpaddress,\r\n  handleHardRedeployClick,\r\n  handleRedeployClick,\r\n  handleReinstallClick,\r\n  handleRestartClick,\r\n  handleStartClick,\r\n  handleStopClick,\r\n  handleUpdateServer,\r\n} from \"../utills/manager\";\r\nimport Input from \"../components/Element/input\";\r\nimport { getServiceApi, updateUserService } from \"../action/action\";\r\nimport { toast } from \"react-toastify\";\r\nimport Button from \"../components/Element/button\";\r\nimport Select, { createFilter } from \"react-select\";\r\nimport {\r\n  continentsOptions,\r\n  countriesOptions,\r\n  regionsOptions,\r\n} from \"../utills/getlocation\";\r\nimport Paypal from \"../components/Paypal\";\r\nimport { gameitems } from \"../assets/json/gamedata\";\r\n\r\nconst ServerInfo = () => {\r\n  const location = useLocation();\r\n  const [environment, setEnvironment] = useState();\r\n  const [servername, setServername] = useState();\r\n  const [ipData, setIpData] = useState();\r\n  const [possibleLocations, setPossibleLocations] = useState();\r\n  const [continent, setContinent] = useState();\r\n  const [country, setCountry] = useState();\r\n  const [region, setRegion] = useState();\r\n  const [geolocationData, setGeolocationData] = useState();\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [timer, setTimer] = useState(null);\r\n  const [flag, setFlag] = useState(0);\r\n  const [clickCheck, setClickCheck] = useState(false);\r\n  const [priceData, setPriceData] = useState();\r\n  console.log(isButtonDisabled, \"isButtonDisabled\");\r\n  const getIpData = async () => {\r\n    const ipdata = await getIpaddress(location.state.data.name);\r\n    setIpData(ipdata);\r\n  };\r\n\r\n  const updateExpireData = async () => {\r\n    if (flag === 1) {\r\n      setClickCheck(false);\r\n      setIsButtonDisabled(true);\r\n      const olddata = await getAppSpecification(location.state.data.name);\r\n      console.log(olddata);\r\n      const expire = await getExpire(location.state.data.name);\r\n      console.log(expire, \"expire\");\r\n      const currentBlockData = await currentBlock();\r\n      const authdata = JSON.parse(localStorage.getItem(\"auth\"));\r\n      const data = {\r\n        type: \"fluxappupdate\",\r\n        version: 1,\r\n        appSpecification: {\r\n          version: 6,\r\n          name: olddata.name,\r\n          description: olddata.description,\r\n          owner: olddata.owner,\r\n          compose: [\r\n            {\r\n              name: olddata.compose[0].name,\r\n              description: olddata.compose[0].description,\r\n              repotag: olddata.compose[0].repotag,\r\n              ports: olddata.compose[0].ports,\r\n              domains: olddata.compose[0].domains,\r\n              environmentParameters: olddata.compose[0].environmentParameters,\r\n              commands: [],\r\n              containerPorts: olddata.compose[0].containerPorts,\r\n              containerData: olddata.compose[0].containerData,\r\n              cpu: 0.2,\r\n              ram: 200,\r\n              hdd: 1,\r\n              tiered: false,\r\n            },\r\n          ],\r\n          instances: 3,\r\n          contacts: [],\r\n          geolocation: [\"acNA\"],\r\n          expire: expire + 22000,\r\n        },\r\n        timestamp: new Date().getTime(),\r\n      };\r\n      console.log(data, \"updated data\");\r\n\r\n      const transaction = await handleUpdateServer(data);\r\n      toast.success(transaction);\r\n      console.log(transaction, \"transaction\");\r\n      if (transaction) {\r\n        const service = await getServiceApi();\r\n        console.log(service, \"filter\");\r\n\r\n        const filterdata = service.serviceData.filter(\r\n          (data) =>\r\n            data.userid === authdata.user._id &&\r\n            data.servername === location.state.data.name\r\n        );\r\n        const serviceData = {\r\n          _id: filterdata[0]._id,\r\n          userid: authdata.user._id,\r\n          name: location.state.data.description,\r\n          currentBlockData: expire + currentBlockData + 22000,\r\n          servername: location.state.data.name,\r\n        };\r\n\r\n        await updateUserService(serviceData).then((res) =>\r\n          toast.success(\"Updated\")\r\n        );\r\n        // Start the timer\r\n        const timerId = setTimeout(() => {\r\n          setIsButtonDisabled(false);\r\n        }, 10000);\r\n        setTimer(timerId);\r\n      }\r\n    } else {\r\n      toast.error(\"Please try with payment\");\r\n      setClickCheck(true);\r\n    }\r\n  };\r\n  console.log(location.state.data);\r\n  const updateEnvironmentData = async () => {\r\n    if (!environment) {\r\n      return toast.error(\"Please input Environment\");\r\n    }\r\n    setIsButtonDisabled(true);\r\n    const olddata = await getAppSpecification(location.state.data.name);\r\n    const expire = await getExpire(location.state.data.name);\r\n    const currentBlockData = await currentBlock();\r\n    const authdata = JSON.parse(localStorage.getItem(\"auth\"));\r\n    const data = {\r\n      type: \"fluxappupdate\",\r\n      version: 1,\r\n      appSpecification: {\r\n        version: 6,\r\n        name: olddata.name,\r\n        description: olddata.description,\r\n        owner: olddata.owner,\r\n        compose: [\r\n          {\r\n            name: olddata.compose[0].name,\r\n            description: olddata.compose[0].description,\r\n            repotag: olddata.compose[0].repotag,\r\n            ports: olddata.compose[0].ports,\r\n            domains: olddata.compose[0].domains,\r\n            environmentParameters: JSON.parse(environment),\r\n            commands: [],\r\n            containerPorts: olddata.compose[0].containerPorts,\r\n            containerData: olddata.compose[0].containerData,\r\n            cpu: 0.2,\r\n            ram: 200,\r\n            hdd: 1,\r\n            tiered: false,\r\n          },\r\n        ],\r\n        instances: 3,\r\n        contacts: [],\r\n        geolocation: [\"acNA\"],\r\n        expire: expire,\r\n      },\r\n      timestamp: new Date().getTime(),\r\n    };\r\n    console.log(data);\r\n\r\n    const transaction = await handleUpdateServer(data);\r\n    toast.success(transaction);\r\n    console.log(transaction, \"transaction\");\r\n    if (transaction) {\r\n      const service = await getServiceApi();\r\n      console.log(service, \"filter\");\r\n\r\n      const filterdata = service.serviceData.filter(\r\n        (data) =>\r\n          data.userid === authdata.user._id &&\r\n          data.servername === location.state.data.name\r\n      );\r\n      const serviceData = {\r\n        _id: filterdata[0]._id,\r\n        userid: authdata.user._id,\r\n        name: location.state.data.description,\r\n        currentBlockData: expire + currentBlockData,\r\n        servername: location.state.data.name,\r\n      };\r\n\r\n      await updateUserService(serviceData).then((res) =>\r\n        toast.success(\"Updated\")\r\n      );\r\n      setFlag(0);\r\n      // Start the timer\r\n      const timerId = setTimeout(() => {\r\n        setIsButtonDisabled(false);\r\n      }, 10000);\r\n      setTimer(timerId);\r\n    }\r\n  };\r\n\r\n  const updateGeolocationData = async () => {\r\n    if (!geolocationData) {\r\n      return toast.error(\"Please fill out geolocation Data\");\r\n    }\r\n    setIsButtonDisabled(true);\r\n    console.log(geolocationData);\r\n    const olddata = await getAppSpecification(location.state.data.name);\r\n    const expire = await getExpire(location.state.data.name);\r\n    const currentBlockData = await currentBlock();\r\n    const authdata = JSON.parse(localStorage.getItem(\"auth\"));\r\n    const data = {\r\n      type: \"fluxappupdate\",\r\n      version: 1,\r\n      appSpecification: {\r\n        version: 6,\r\n        name: olddata.name,\r\n        description: olddata.description,\r\n        owner: olddata.owner,\r\n        compose: [\r\n          {\r\n            name: olddata.compose[0].name,\r\n            description: olddata.compose[0].description,\r\n            repotag: olddata.compose[0].repotag,\r\n            ports: olddata.compose[0].ports,\r\n            domains: olddata.compose[0].domains,\r\n            environmentParameters: olddata.compose[0].environmentParameters,\r\n            commands: [],\r\n            containerPorts: olddata.compose[0].containerPorts,\r\n            containerData: olddata.compose[0].containerData,\r\n            cpu: 0.2,\r\n            ram: 200,\r\n            hdd: 1,\r\n            tiered: false,\r\n          },\r\n        ],\r\n        instances: 3,\r\n        contacts: [],\r\n        geolocation: geolocationData,\r\n        expire: expire,\r\n      },\r\n      timestamp: new Date().getTime(),\r\n    };\r\n    console.log(data);\r\n\r\n    const transaction = await handleUpdateServer(data);\r\n    toast.success(transaction);\r\n    console.log(transaction, \"transaction\");\r\n    if (transaction) {\r\n      const service = await getServiceApi();\r\n      console.log(service, \"filter\");\r\n\r\n      const filterdata = service.serviceData.filter(\r\n        (data) =>\r\n          data.userid === authdata.user._id &&\r\n          data.servername === location.state.data.name\r\n      );\r\n      const serviceData = {\r\n        _id: filterdata[0]._id,\r\n        userid: authdata.user._id,\r\n        name: location.state.data.description,\r\n        currentBlockData: expire + currentBlockData,\r\n        servername: location.state.data.name,\r\n      };\r\n\r\n      await updateUserService(serviceData).then((res) =>\r\n        toast.success(\"GeoLocation Updated\")\r\n      );\r\n      // Start the timer\r\n      const timerId = setTimeout(() => {\r\n        setIsButtonDisabled(false);\r\n      }, 10000);\r\n      setTimer(timerId);\r\n    }\r\n  };\r\n\r\n  const updateServerName = async () => {\r\n    const authdata = JSON.parse(localStorage.getItem(\"auth\"));\r\n    const service = await getServiceApi();\r\n    console.log(service, \"filter\");\r\n\r\n    const filterdata = service.serviceData.filter(\r\n      (data) =>\r\n        data.userid === authdata.user._id &&\r\n        data.servername === location.state.data.name\r\n    );\r\n    console.log(filterdata[0]._id);\r\n    const serviceData = {\r\n      _id: filterdata[0]._id,\r\n      changedname: servername,\r\n    };\r\n\r\n    await updateUserService(serviceData).then((res) =>\r\n      toast.success(\"Server Name Updated\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    getFluxAuth();\r\n    getIpData();\r\n    getPossibleLocation();\r\n    const pricedata = gameitems.filter(\r\n      (item) => item.title === location.state.data.description\r\n    );\r\n    const suitabledata =\r\n      pricedata[0].cpu1 === location.state.data.components[0].cpu\r\n        ? pricedata[0].price1\r\n        : pricedata[0].price2;\r\n    setPriceData(suitabledata);\r\n  }, []);\r\n\r\n  const getPossibleLocation = async () => {\r\n    let possibleLocations = [];\r\n\r\n    const response = await fetch(\r\n      \"https://stats.runonflux.io/fluxinfo?projection=geolocation\"\r\n    ).then((res) => res.json());\r\n\r\n    if (response.status === \"success\") {\r\n      const geoData = response.data;\r\n      if (geoData.length > 5000) {\r\n        // all went well\r\n        geoData.forEach((flux) => {\r\n          if (\r\n            flux.geolocation &&\r\n            flux.geolocation.continentCode &&\r\n            flux.geolocation.regionName &&\r\n            flux.geolocation.countryCode\r\n          ) {\r\n            const continentLocation = flux.geolocation.continentCode;\r\n            const countryLocation = `${continentLocation}_${flux.geolocation.countryCode}`;\r\n            const regionLocation = `${countryLocation}_${flux.geolocation.regionName}`;\r\n            const continentLocationExists = possibleLocations.find(\r\n              (location) => location.value === continentLocation\r\n            );\r\n            if (continentLocationExists) {\r\n              continentLocationExists.instances += 1;\r\n            } else {\r\n              possibleLocations.push({\r\n                value: continentLocation,\r\n                instances: 1,\r\n              });\r\n            }\r\n            const countryLocationExists = possibleLocations.find(\r\n              (location) => location.value === countryLocation\r\n            );\r\n            if (countryLocationExists) {\r\n              countryLocationExists.instances += 1;\r\n            } else {\r\n              possibleLocations.push({\r\n                value: countryLocation,\r\n                instances: 1,\r\n              });\r\n            }\r\n            const regionLocationExists = possibleLocations.find(\r\n              (location) => location.value === regionLocation\r\n            );\r\n            if (regionLocationExists) {\r\n              regionLocationExists.instances += 1;\r\n            } else {\r\n              possibleLocations.push({\r\n                value: regionLocation,\r\n                instances: 1,\r\n              });\r\n            }\r\n          }\r\n        });\r\n        setPossibleLocations(possibleLocations);\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    let text = \"\";\r\n    if (continent !== \"ALL\") {\r\n      if (continent) {\r\n        text = \"ac\" + text + continent.value;\r\n      }\r\n      if (country) {\r\n        text = text + \"_\" + country.value;\r\n      }\r\n      if (region) {\r\n        text = text + \"_\" + region.value;\r\n      }\r\n    } else {\r\n      text = \"\";\r\n    }\r\n    // country && text =  text+country + \"_\";\r\n    // region && text = text+ region;\r\n    setGeolocationData([text], \"Adsf\");\r\n  }, [continent, country, region]);\r\n\r\n  console.log(geolocationData);\r\n  useEffect(() => {\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [timer]);\r\n  return (\r\n    <Wrapper>\r\n      <WrapperContainer>\r\n        <ServerInfoPart>\r\n          <Title>Server Information</Title>\r\n          <Row>Server Name - {location.state.data.name}</Row>\r\n          <Row>Description - {location.state.data.description}</Row>\r\n          IPv4 - {ipData && ipData[0].ip.split(\":\")[0]}\r\n          {/* {ipData?.map((item, key) => (\r\n            <Row key={key}>\r\n               - PORT -{\" \"}\r\n              {location.state.data.components[0].ports}\r\n            </Row>\r\n          ))} */}\r\n          {/* <Row>IPv4 - {ipData?.ipaddress}</Row> */}\r\n          <Row>Port - {location.state.data.components[0].ports}</Row>\r\n        </ServerInfoPart>\r\n        <ButtonGroup>\r\n          <ColumnButton>\r\n            <Title> Control</Title>\r\n            <Button\r\n              text=\"START\"\r\n              width=\"100%\"\r\n              radius=\"6px\"\r\n              fweight=\"500\"\r\n              color=\"black\"\r\n              fsize=\"16px\"\r\n              padding=\"15px\"\r\n              onClick={() => handleStartClick(location.state.data.name)}\r\n            />\r\n            <Button\r\n              text=\"STOP\"\r\n              width=\"100%\"\r\n              radius=\"6px\"\r\n              fweight=\"500\"\r\n              color=\"black\"\r\n              fsize=\"16px\"\r\n              padding=\"15px\"\r\n              onClick={() => handleStopClick(location.state.data.name)}\r\n            />\r\n            <Button\r\n              text=\"RESTART\"\r\n              width=\"100%\"\r\n              radius=\"6px\"\r\n              fweight=\"500\"\r\n              color=\"black\"\r\n              fsize=\"16px\"\r\n              padding=\"15px\"\r\n              onClick={() => handleRestartClick(location.state.data.name)}\r\n            />\r\n          </ColumnButton>\r\n          <ColumnButton>\r\n            <Title> Deployment Control </Title>\r\n            <Button\r\n              text=\"Reinstall\"\r\n              width=\"100%\"\r\n              radius=\"6px\"\r\n              fweight=\"500\"\r\n              color=\"black\"\r\n              fsize=\"16px\"\r\n              padding=\"15px\"\r\n              onClick={() => handleReinstallClick(location.state.data.name)}\r\n            />\r\n\r\n            <Button\r\n              text=\"Move Server\"\r\n              width=\"100%\"\r\n              radius=\"6px\"\r\n              fweight=\"500\"\r\n              color=\"black\"\r\n              fsize=\"16px\"\r\n              padding=\"15px\"\r\n              onClick={() => handleRedeployClick(location.state.data.name)}\r\n            />\r\n          </ColumnButton>\r\n          <ColumnButton>\r\n            <Title>Data Control</Title>\r\n            {/* <Button>Load Backup</Button> */}\r\n            <Button\r\n              text=\" Clean SSD\"\r\n              width=\"100%\"\r\n              radius=\"6px\"\r\n              fweight=\"500\"\r\n              color=\"black\"\r\n              fsize=\"16px\"\r\n              padding=\"15px\"\r\n              onClick={() => handleHardRedeployClick(location.state.data.name)}\r\n            />\r\n          </ColumnButton>\r\n        </ButtonGroup>\r\n        <Title>Update</Title>\r\n        <ButtonGroup2>\r\n          <Input\r\n            placeholder=\"\"\r\n            onChange={(e) => setServername(e.target.value)}\r\n          />\r\n          <Button\r\n            text=\"Update Server name\"\r\n            width=\"100%\"\r\n            radius=\"6px\"\r\n            fweight=\"500\"\r\n            color=\"black\"\r\n            fsize=\"16px\"\r\n            padding=\"15px\"\r\n            onClick={updateServerName}\r\n          />\r\n        </ButtonGroup2>\r\n        <ButtonGroup2>\r\n          <Input\r\n            placeholder=\"[`Admin`]\"\r\n            onChange={(e) => setEnvironment(e.target.value)}\r\n          />\r\n          <Button\r\n            text=\"Update Environment\"\r\n            width=\"100%\"\r\n            radius=\"6px\"\r\n            fweight=\"500\"\r\n            color=\"black\"\r\n            fsize=\"16px\"\r\n            padding=\"15px\"\r\n            onClick={!isButtonDisabled ? updateEnvironmentData : undefined}\r\n            bgcolor={isButtonDisabled === true && \"rgb(255,255,255,0.3)\"}\r\n          />\r\n        </ButtonGroup2>\r\n        <ButtonGroup2>\r\n          {possibleLocations && (\r\n            <Select\r\n              className=\"basic-single\"\r\n              classNamePrefix=\"select\"\r\n              isSearchable=\"true\"\r\n              options={continentsOptions(\"false\", possibleLocations)}\r\n              onChange={(e) => {\r\n                setContinent(e);\r\n                setCountry(\"\");\r\n                setRegion(\"\");\r\n              }}\r\n            />\r\n          )}\r\n          {continent ? (\r\n            <Select\r\n              onChange={(e) => {\r\n                setCountry(e);\r\n                setRegion(\"\");\r\n              }}\r\n              className=\"basic-single\"\r\n              classNamePrefix=\"select\"\r\n              isSearchable=\"true\"\r\n              value={[country]}\r\n              options={countriesOptions(\r\n                continent.value,\r\n                \"false\",\r\n                possibleLocations\r\n              )}\r\n            />\r\n          ) : (\r\n            <></>\r\n          )}\r\n          {continent && country && (\r\n            <Select\r\n              className=\"basic-single\"\r\n              classNamePrefix=\"select\"\r\n              isSearchable=\"true\"\r\n              value={[region]}\r\n              options={regionsOptions(\r\n                continent.value,\r\n                country.value,\r\n                \"false\",\r\n                possibleLocations\r\n              )}\r\n              onChange={(e) => {\r\n                setRegion(e);\r\n              }}\r\n            />\r\n          )}\r\n        </ButtonGroup2>\r\n        <ButtonGroup2>\r\n          {possibleLocations && (\r\n            <Button\r\n              text=\"Update Geolocation\"\r\n              width=\"100%\"\r\n              radius=\"6px\"\r\n              fweight=\"500\"\r\n              color=\"black\"\r\n              fsize=\"16px\"\r\n              padding=\"15px\"\r\n              onClick={!isButtonDisabled ? updateGeolocationData : undefined}\r\n              bgcolor={isButtonDisabled === true && \"rgb(255,255,255,0.3)\"}\r\n            />\r\n          )}\r\n          <Button\r\n            onClick={!isButtonDisabled ? updateExpireData : undefined}\r\n            bgcolor={isButtonDisabled === true && \"rgb(255,255,255,0.3)\"}\r\n            text=\"Extend Rental\"\r\n            width=\"100%\"\r\n            radius=\"6px\"\r\n            fweight=\"500\"\r\n            color=\"black\"\r\n            fsize=\"16px\"\r\n            padding=\"15px\"\r\n          />\r\n        </ButtonGroup2>\r\n        {clickCheck && (\r\n          <>\r\n            <Paypal cost=\"1\" setFlag={setFlag} />\r\n            <CoinbaseCommerceButton\r\n              styled\r\n              checkoutId=\"c632fe45-0566-48e8-9fdc-59c35b7234ca\"\r\n              // checkoutId={checkout}\r\n              // chargeId=\"CWL2LG2J\"\r\n              onChargeSuccess={(data) => {\r\n                console.log(data);\r\n                setFlag(1);\r\n              }}\r\n              onChargeFailure={(data) => {\r\n                console.log(data);\r\n              }}\r\n              onPaymentDetected={(data) => {\r\n                console.log(data);\r\n              }}\r\n              onModalClosed={() => {\r\n                console.log(\"Payment Cancelled\");\r\n              }}\r\n            />\r\n          </>\r\n        )}\r\n\r\n        <ApplyMod>\r\n          <Row>Mods</Row>\r\n          <Row>Current Mod - FTB-stoneblock3.1.6.1</Row>\r\n        </ApplyMod>\r\n        <Title>Advance ssh </Title>\r\n        <ButtonGroup>\r\n          <Title>Definition</Title>\r\n          <Row>Reinstalls: Devices and reinstalls all </Row>\r\n        </ButtonGroup>\r\n      </WrapperContainer>\r\n    </Wrapper>\r\n  );\r\n};\r\nconst Wrapper = styled(Column)`\r\n  background-color: #313131;\r\n  width: 100%;\r\n  color: white;\r\n  padding: 20px;\r\n  gap: 20px;\r\n`;\r\nconst WrapperContainer = styled(Column)`\r\n  gap: 20px;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  max-width: 900px;\r\n  width: 100%;\r\n  margin-top: 100px;\r\n`;\r\n\r\nconst ServerInfoPart = styled(Column)`\r\n  gap: 5px;\r\n  align-items: flex-start;\r\n`;\r\nconst Title = styled.div`\r\n  font: 20px;\r\n  margin-bottom: 5px;\r\n`;\r\nconst ButtonGroup = styled(Row)`\r\n  gap: 10px;\r\n  align-items: flex-start;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n`;\r\nconst ButtonGroup2 = styled(ButtonGroup)`\r\n  gap: 10px;\r\n  align-items: flex-start;\r\n  flex-wrap: nowrap;\r\n`;\r\nconst ColumnButton = styled(Column)`\r\n  gap: 5px;\r\n  width: 250px;\r\n`;\r\nconst ApplyMod = styled(Column)`\r\n  gap: 10px;\r\n  width: 100%;\r\n`;\r\n\r\nexport default ServerInfo;\r\n","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\pages\\Auth\\login.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\pages\\profile.js",["148","149"],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\pages\\Auth\\register.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\pages\\index.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Layout\\index.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Element\\textarea.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Element\\button.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Element\\input.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\action\\action.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\utills\\gethash.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\assets\\json\\period.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\assets\\json\\gamedata.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\assets\\json\\mopacks.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\assets\\json\\location.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Element\\index.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Image\\index.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Paypal\\index.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Element\\Card\\backgroundCard.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Element\\Card\\gameCard.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Layout\\footer.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Layout\\header.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\utills\\index.js",[],"F:\\work\\wickesensation\\hosting-website\\frontend\\src\\components\\Paypal\\PayButtons.js",["150"],"import { useEffect } from \"react\";\r\nimport { PayPalButtons, usePayPalScriptReducer } from \"@paypal/react-paypal-js\";\r\nconst ButtonWrapper = ({ currency, showSpinner, cost, setFlag }) => {\r\n  // usePayPalScriptReducer can be use only inside children of PayPalScriptProviders\r\n  // This is the main reason to wrap the PayPalButtons in a new component\r\n  const [{ options, isPending }, dispatch] = usePayPalScriptReducer();\r\n  const amount = cost;\r\n  const style = { layout: \"vertical\" };\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: \"resetOptions\",\r\n      value: {\r\n        ...options,\r\n        currency: currency,\r\n      },\r\n    });\r\n  }, [currency, showSpinner]);\r\n\r\n  return (\r\n    <>\r\n      {showSpinner && isPending && <div className=\"spinner\" />}\r\n      <PayPalButtons\r\n        style={style}\r\n        disabled={false}\r\n        forceReRender={[amount, currency, style]}\r\n        fundingSource={undefined}\r\n        createOrder={(data, actions) => {\r\n          return actions.order\r\n            .create({\r\n              purchase_units: [\r\n                {\r\n                  amount: {\r\n                    currency_code: currency,\r\n                    value: amount,\r\n                  },\r\n                },\r\n              ],\r\n            })\r\n            .then((orderId) => {\r\n              // Your code here after create the order\r\n              return orderId;\r\n            });\r\n        }}\r\n        onApprove={function (data, actions) {\r\n          return actions.order.capture().then(function (details) {\r\n            const name = details.payer.name.given_name;\r\n            alert(`Transaction completed by ${name}`);\r\n            setFlag(1);\r\n            console.log(data);\r\n            // Your code here after capture the order\r\n          });\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default ButtonWrapper;\r\n","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\utills\\manager.js",["151"],"import bitcoin from \"bitcoinjs-lib\";\r\nimport bitcoinMessage from \"bitcoinjs-message\";\r\nimport { toast } from \"react-toastify\";\r\nimport { getUserService } from \"../action/action\";\r\nimport getHash from \"./gethash\";\r\nconst handleStartClick = async (server) => {\r\n  await fetch(`https://api.runonflux.io/apps/appstart/${server}/true`, {\r\n    method: \"get\",\r\n    headers: {\r\n      zelidauth: localStorage.getItem(\"fluxauth\"),\r\n    },\r\n  })\r\n    .then((res) => res.json())\r\n    .then((response) => toast.success(response.data.message))\r\n    .catch((err) => console.log(err));\r\n};\r\nconst handleStopClick = async (server) => {\r\n  await fetch(`https://api.runonflux.io/apps/appstop/${server}/true`, {\r\n    method: \"get\",\r\n    headers: {\r\n      zelidauth: localStorage.getItem(\"fluxauth\"),\r\n    },\r\n  })\r\n    .then((res) => res.json())\r\n    .then((response) => toast.success(response.data))\r\n    .catch((err) => console.log(err));\r\n};\r\nconst handleReinstallClick = async (server) => {\r\n  await fetch(`https://api.runonflux.io/apps/appremove/${server}/true`, {\r\n    method: \"get\",\r\n    headers: {\r\n      zelidauth: localStorage.getItem(\"fluxauth\"),\r\n    },\r\n  })\r\n    .then((res) => res.text())\r\n    .then((response) => {\r\n      const jsonArray = `[${response.replace(/}{/g, \"},{\")}]`;\r\n      JSON.parse(jsonArray).map((item) => {\r\n        toast.success(item.status);\r\n      });\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\nconst handleRedeployClick = async (server) => {\r\n  await fetch(`https://api.runonflux.io/apps/redeploy/${server}/false/true`, {\r\n    method: \"get\",\r\n    headers: {\r\n      zelidauth: localStorage.getItem(\"fluxauth\"),\r\n    },\r\n  })\r\n    .then((res) => res.json())\r\n    .then((response) => toast.success(response.data.message))\r\n    .catch((err) => console.log(err));\r\n};\r\nconst handleHardRedeployClick = async (server) => {\r\n  await fetch(`https://api.runonflux.io/apps/redeploy/${server}/true/true`, {\r\n    method: \"get\",\r\n    headers: {\r\n      zelidauth: localStorage.getItem(\"fluxauth\"),\r\n    },\r\n  })\r\n    .then((res) => res.json())\r\n    .then((response) => toast.success(response.data.message))\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nconst handleRestartClick = async (server) => {\r\n  await fetch(`https://api.runonflux.io/apps/apprestart/${server}/true`, {\r\n    method: \"get\",\r\n    headers: {\r\n      zelidauth: localStorage.getItem(\"fluxauth\"),\r\n    },\r\n  })\r\n    .then((res) => res.json())\r\n    .then((response) => toast.success(response.data.message))\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nconst getFluxAuth = async () => {\r\n  const zelID = \"1GLMJwdJEHySNwSqkC4iKpoBU215m7BkDk\";\r\n  const zelIDPrivatekey =\r\n    \"L3yGy6krc9VywytHCNEQfuMdpKrPzCfqW9knYAqCyGkKFxLnoXCE\";\r\n  const logininfo = await fetch(\"https://api.runonflux.io/id/loginphrase\", {\r\n    method: \"get\",\r\n  })\r\n    .then((res) => res.json())\r\n    .then((response) => response.data);\r\n\r\n  const keyPair = bitcoin.ECPair.fromWIF(zelIDPrivatekey);\r\n  const privateKey = keyPair.d.toBuffer(32);\r\n  // const privateKey = keyPair.privateKey;\r\n  const message = logininfo;\r\n  const signature = bitcoinMessage.sign(\r\n    message,\r\n    privateKey,\r\n    keyPair.compressed\r\n  );\r\n  const alldata = {\r\n    zelid: zelID,\r\n    signature: signature,\r\n    loginPhrase: logininfo,\r\n  };\r\n  localStorage.setItem(\"fluxauth\", JSON.stringify(alldata));\r\n};\r\nconst getPaidaddress = async () => {\r\n  return await fetch(`https://api.runonflux.io/apps/deploymentinformation`, {\r\n    method: \"get\",\r\n    headers: {\r\n      zelidauth: localStorage.getItem(\"fluxauth\"),\r\n    },\r\n  })\r\n    .then((res) => res.json())\r\n    .then((response) => response.data.address)\r\n    .catch((err) => console.log(err));\r\n};\r\nconst getIpaddress = async (servername) => {\r\n  console.log(servername);\r\n  return await fetch(`https://api.runonflux.io/apps/location/${servername}`, {\r\n    method: \"get\",\r\n  })\r\n    .then((res) => res.json())\r\n    .then((response) => response.data)\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nconst getbenchmarks = async () => {\r\n  return await fetch(`https://api.runonflux.io/benchmark/getbenchmarks`, {\r\n    method: \"get\",\r\n  })\r\n    .then((res) => res.json())\r\n    .then((response) => response.data)\r\n    .catch((err) => console.log(err));\r\n};\r\nconst getAmout = async (cpu, ram, hdd, expire) => {\r\n  const zelID = \"1GLMJwdJEHySNwSqkC4iKpoBU215m7BkDk\";\r\n  const data = {\r\n    version: 6,\r\n    name: `cubehostings`,\r\n    description: \"server\",\r\n    owner: zelID,\r\n    compose: [\r\n      {\r\n        name: \"wickedsensation\",\r\n        description: \"server\",\r\n        repotag: \"wickedsensation/stoneblock3:1.6.1\",\r\n        ports: [39097, 39098],\r\n        domains: [\"\", \"\"],\r\n        environmentParameters: [],\r\n        commands: [],\r\n        containerPorts: [25565, 22],\r\n        containerData: \"/data/world  s:/data/backups\",\r\n        cpu: cpu,\r\n        ram: ram,\r\n        hdd: hdd,\r\n        tiered: false,\r\n      },\r\n    ],\r\n    instances: 3,\r\n    contacts: [],\r\n    geolocation: [],\r\n    expire: expire,\r\n  };\r\n\r\n  return await fetch(`https://api.runonflux.io/apps/calculateprice`, {\r\n    method: \"post\",\r\n    body: JSON.stringify(data),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((response) => response.data)\r\n    .catch((err) => console.log(err));\r\n};\r\nconst currentBlock = async () => {\r\n  return await fetch(`https://api.runonflux.io/daemon/getblockcount`, {\r\n    method: \"get\",\r\n  })\r\n    .then((res) => res.json())\r\n    .then((response) => response.data)\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nconst sendrawTransaction = async (hashdata) => {\r\n  return await fetch(`https://api.runonflux.io/daemon/sendrawtransaction`, {\r\n    method: \"post\",\r\n    headers: {\r\n      zelidauth: localStorage.getItem(\"fluxauth\"),\r\n    },\r\n    body: JSON.stringify({\r\n      hexstring: hashdata,\r\n      allowhighfees: false,\r\n    }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((response) => response.data)\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nconst getExpire = async (server) => {\r\n  const authdata = JSON.parse(localStorage.getItem(\"auth\"));\r\n  const resdata = await getUserService({\r\n    userid: authdata.user._id,\r\n    servername: server,\r\n  });\r\n  const currentBlockData = await currentBlock();\r\n  return (\r\n    Math.round(\r\n      (resdata?.filterdata[0]?.currentBlockData - currentBlockData) / 1000\r\n    ) * 1000\r\n  );\r\n};\r\n\r\nconst handleUpdateServer = async (data) => {\r\n  const signatureinfo =\r\n    data.type +\r\n    data.version +\r\n    JSON.stringify(data.appSpecification) +\r\n    data.timestamp;\r\n  const zelIDPrivatekey =\r\n    \"L3yGy6krc9VywytHCNEQfuMdpKrPzCfqW9knYAqCyGkKFxLnoXCE\";\r\n  const keyPair = bitcoin.ECPair.fromWIF(zelIDPrivatekey);\r\n  const privateKey = keyPair.d.toBuffer(32);\r\n  const message = signatureinfo;\r\n  const signatureData = bitcoinMessage.sign(\r\n    message,\r\n    privateKey,\r\n    keyPair.compressed\r\n  );\r\n  data.signature = Buffer.from(signatureData).toString(\"base64\");\r\n  const updatehash = await fetch(\"https://api.runonflux.io/apps/appupdate\", {\r\n    method: \"post\",\r\n    headers: {\r\n      zelidauth: localStorage.getItem(\"fluxauth\"),\r\n    },\r\n    body: JSON.stringify(data),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((response) => response.data)\r\n    .catch((err) => console.log(err));\r\n  const paidaddress = await getPaidaddress();\r\n  const amount = await getAmout(\r\n    data.appSpecification.compose[0].cpu,\r\n    data.appSpecification.compose[0].ram,\r\n    data.appSpecification.compose[0].hdd,\r\n    data.appSpecification.expire\r\n  );\r\n  console.log(updatehash, amount, paidaddress, \"paidaddress\");\r\n\r\n  const hashdata = await getHash(updatehash, amount, paidaddress);\r\n\r\n  return await sendrawTransaction(hashdata);\r\n};\r\n\r\nconst getAppSpecification = async (server) => {\r\n  return await fetch(\r\n    `https://api.runonflux.io/apps/appspecifications/${server}`,\r\n    {\r\n      method: \"get\",\r\n      headers: {\r\n        zelidauth: localStorage.getItem(\"fluxauth\"),\r\n      },\r\n    }\r\n  )\r\n    .then((res) => res.json())\r\n    .then((response) => response.data)\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nconst getFluxAllUserData = async () => {\r\n  const Fluxauth = JSON.parse(localStorage.getItem(\"fluxauth\"));\r\n  return await fetch(\r\n    `https://jetpackbridge.runonflux.io/api/v1/dapps.php?filter=&zelid=${\r\n      Fluxauth.zelid\r\n    }&signature=${Buffer.from(Fluxauth.signature).toString(\r\n      \"base64\"\r\n    )}&loginPhrase=${Fluxauth.loginPhrase}`\r\n  )\r\n    .then((res) => res.json())\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport {\r\n  handleStartClick,\r\n  handleRestartClick,\r\n  handleHardRedeployClick,\r\n  handleRedeployClick,\r\n  handleReinstallClick,\r\n  handleStopClick,\r\n  getFluxAuth,\r\n  getPaidaddress,\r\n  getAmout,\r\n  getIpaddress,\r\n  currentBlock,\r\n  sendrawTransaction,\r\n  handleUpdateServer,\r\n  getAppSpecification,\r\n  getExpire,\r\n  getFluxAllUserData,\r\n  getbenchmarks,\r\n};\r\n","F:\\work\\wickesensation\\hosting-website\\frontend\\src\\utills\\getlocation.js",["152"],{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":39,"column":9,"nodeType":"159","messageId":"160","endLine":39,"endColumn":17},{"ruleId":"157","severity":1,"message":"161","line":48,"column":10,"nodeType":"159","messageId":"160","endLine":48,"endColumn":23},{"ruleId":"157","severity":1,"message":"162","line":10,"column":24,"nodeType":"159","messageId":"160","endLine":10,"endColumn":39},{"ruleId":"157","severity":1,"message":"163","line":9,"column":3,"nodeType":"159","messageId":"160","endLine":9,"endColumn":16},{"ruleId":"157","severity":1,"message":"164","line":25,"column":18,"nodeType":"159","messageId":"160","endLine":25,"endColumn":30},{"ruleId":"157","severity":1,"message":"165","line":48,"column":10,"nodeType":"159","messageId":"160","endLine":48,"endColumn":19},{"ruleId":"166","severity":1,"message":"167","line":317,"column":6,"nodeType":"168","endLine":317,"endColumn":8,"suggestions":"169"},{"ruleId":"157","severity":1,"message":"170","line":27,"column":11,"nodeType":"159","messageId":"160","endLine":27,"endColumn":23},{"ruleId":"166","severity":1,"message":"171","line":49,"column":6,"nodeType":"168","endLine":49,"endColumn":8,"suggestions":"172"},{"ruleId":"166","severity":1,"message":"173","line":18,"column":6,"nodeType":"168","endLine":18,"endColumn":29,"suggestions":"174"},{"ruleId":"175","severity":1,"message":"176","line":38,"column":40,"nodeType":"177","messageId":"178","endLine":38,"endColumn":42},{"ruleId":"179","severity":1,"message":"180","line":6,"column":12,"nodeType":"181","messageId":"182","endLine":6,"endColumn":14},"no-native-reassign",["183"],"no-negated-in-lhs",["184"],"no-unused-vars","'checkout' is assigned a value but never used.","Identifier","unusedVar","'servicenumber' is assigned a value but never used.","'setSelectedData' is assigned a value but never used.","'getbenchmarks' is defined but never used.","'createFilter' is defined but never used.","'priceData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getIpData', 'location.state.data.components', and 'location.state.data.description'. Either include them or remove the dependency array.","ArrayExpression",["185"],"'fluxuserdata' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.",["186"],"React Hook useEffect has missing dependencies: 'dispatch' and 'options'. Either include them or remove the dependency array.",["187"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},"Update the dependencies array to be: [getIpData, location.state.data.components, location.state.data.description]",{"range":"194","text":"195"},"Update the dependencies array to be: [auth]",{"range":"196","text":"197"},"Update the dependencies array to be: [currency, dispatch, options, showSpinner]",{"range":"198","text":"199"},[10607,10609],"[getIpData, location.state.data.components, location.state.data.description]",[1628,1630],"[auth]",[645,668],"[currency, dispatch, options, showSpinner]"]